plugins {
	id 'fabric-loom' version '0.2.6-SNAPSHOT'
	id 'maven-publish'
	id 'c'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version

model {
	components {
		link(NativeLibrarySpec) {
			binaries.all {
				// todo clang?
				// gradle uses nostdinc on all except os x
				if (targetPlatform.operatingSystem.macOsX) {
					cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
					cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
				} else if (targetPlatform.operatingSystem.linux) {
					// guess toolchain header path with prefix /usr/lib/gcc
					def machine = new ByteArrayOutputStream()
					exec {
						commandLine "gcc", "-dumpmachine"
						standardOutput = machine
					}
					def version = new ByteArrayOutputStream()
					exec {
						commandLine "gcc", "-dumpversion"
						standardOutput = version
					}
					def machineTrimmed = machine.toString().trim()
					def versionTrimmed = version.toString().trim()
					cCompiler.args '-I', "/usr/lib/gcc/$machineTrimmed/$versionTrimmed/include"
					cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
					cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
					cCompiler.args '-I', "/usr/include"
					cCompiler.args '-I', "/usr/include/linux"
					linker.args '-lrt'
				} else if (targetPlatform.operatingSystem.windows) {
					cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
					cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
					// todo stdinc
				} else if (targetPlatform.operatingSystem.freeBSD) {
					cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
					cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/freebsd"
					// todo stdinc
				}
			}
		}
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
	from "build/libs/link/shared/liblink.so"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
